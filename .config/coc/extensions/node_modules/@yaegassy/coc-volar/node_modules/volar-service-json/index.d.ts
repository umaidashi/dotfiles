import type { ServicePlugin, DocumentSelector, ServiceContext, Disposable, Result } from '@volar/language-service';
import * as json from 'vscode-json-languageservice';
import type { TextDocument } from 'vscode-languageserver-textdocument';
export interface Provide {
    'json/jsonDocument': (document: TextDocument) => json.JSONDocument | undefined;
    'json/languageService': () => json.LanguageService;
}
export interface JSONSchemaSettings {
    fileMatch?: string[];
    url?: string;
    schema?: json.JSONSchema;
    folderUri?: string;
}
export declare function create({ documentSelector, getWorkspaceContextService, isFormattingEnabled, getFormattingOptions, getLanguageSettings, getDocumentLanguageSettings, onDidChangeLanguageSettings, }?: {
    documentSelector?: DocumentSelector;
    getWorkspaceContextService?(context: ServiceContext): json.WorkspaceContextService;
    isFormattingEnabled?(document: TextDocument, context: ServiceContext): Result<boolean>;
    getFormattingOptions?(document: TextDocument, context: ServiceContext): Result<json.FormattingOptions | undefined>;
    getLanguageSettings?(context: ServiceContext): Result<json.LanguageSettings>;
    getDocumentLanguageSettings?(document: TextDocument, context: ServiceContext): Result<json.DocumentLanguageSettings | undefined>;
    onDidChangeLanguageSettings?(listener: () => void, context: ServiceContext): Disposable;
}): ServicePlugin;
//# sourceMappingURL=index.d.ts.map