"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchNamedPipeServerForFile = exports.getElementAttrs = exports.getComponentNames = exports.getTemplateContextProps = exports.getComponentEvents = exports.getComponentProps = exports.getQuickInfoAtPosition = exports.getPropertiesAtLocation = exports.collectExtractProps = void 0;
const fs = require("fs");
const path = require("path");
const utils_1 = require("./utils");
function collectExtractProps(...args) {
    return sendRequest({
        type: 'collectExtractProps',
        args,
    });
}
exports.collectExtractProps = collectExtractProps;
async function getPropertiesAtLocation(...args) {
    return await sendRequest({
        type: 'getPropertiesAtLocation',
        args,
    });
}
exports.getPropertiesAtLocation = getPropertiesAtLocation;
function getQuickInfoAtPosition(...args) {
    return sendRequest({
        type: 'getQuickInfoAtPosition',
        args,
    });
}
exports.getQuickInfoAtPosition = getQuickInfoAtPosition;
// Component Infos
function getComponentProps(...args) {
    return sendRequest({
        type: 'getComponentProps',
        args,
    });
}
exports.getComponentProps = getComponentProps;
function getComponentEvents(...args) {
    return sendRequest({
        type: 'getComponentEvents',
        args,
    });
}
exports.getComponentEvents = getComponentEvents;
function getTemplateContextProps(...args) {
    return sendRequest({
        type: 'getTemplateContextProps',
        args,
    });
}
exports.getTemplateContextProps = getTemplateContextProps;
function getComponentNames(...args) {
    return sendRequest({
        type: 'getComponentNames',
        args,
    });
}
exports.getComponentNames = getComponentNames;
function getElementAttrs(...args) {
    return sendRequest({
        type: 'getElementAttrs',
        args,
    });
}
exports.getElementAttrs = getElementAttrs;
async function sendRequest(request) {
    const server = await searchNamedPipeServerForFile(request.args[0]);
    if (!server) {
        console.warn('[Vue Named Pipe Client] No server found for', request.args[0]);
        return;
    }
    const client = await (0, utils_1.connect)(server.path);
    if (!client) {
        console.warn('[Vue Named Pipe Client] Failed to connect to', server.path);
        return;
    }
    return await sendRequestWorker(request, client);
}
async function searchNamedPipeServerForFile(fileName) {
    if (!fs.existsSync(utils_1.pipeTable)) {
        return;
    }
    const servers = JSON.parse(fs.readFileSync(utils_1.pipeTable, 'utf8'));
    const configuredServers = servers
        .filter(item => item.serverKind === 1);
    const inferredServers = servers
        .filter(item => item.serverKind === 0)
        .sort((a, b) => b.currentDirectory.length - a.currentDirectory.length);
    for (const server of configuredServers) {
        const client = await (0, utils_1.connect)(server.path);
        if (client) {
            const response = await sendRequestWorker({ type: 'containsFile', args: [fileName] }, client);
            if (response) {
                return server;
            }
        }
    }
    for (const server of inferredServers) {
        if (!path.relative(server.currentDirectory, fileName).startsWith('..')) {
            const client = await (0, utils_1.connect)(server.path);
            if (client) {
                return server;
            }
        }
    }
}
exports.searchNamedPipeServerForFile = searchNamedPipeServerForFile;
function sendRequestWorker(request, client) {
    return new Promise(resolve => {
        let dataChunks = [];
        client.on('data', chunk => {
            dataChunks.push(chunk);
        });
        client.on('end', () => {
            if (!dataChunks.length) {
                console.warn('[Vue Named Pipe Client] No response from server for request:', request.type);
                resolve(undefined);
                return;
            }
            const data = Buffer.concat(dataChunks);
            const text = data.toString();
            let json = null;
            try {
                json = JSON.parse(text);
            }
            catch (e) {
                console.error('[Vue Named Pipe Client] Failed to parse response:', text);
                resolve(undefined);
                return;
            }
            resolve(json);
        });
        client.write(JSON.stringify(request));
    });
}
//# sourceMappingURL=client.js.map