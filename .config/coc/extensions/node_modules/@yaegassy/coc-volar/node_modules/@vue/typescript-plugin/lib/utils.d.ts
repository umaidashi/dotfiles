/// <reference types="node" />
import type { FileRegistry, VueCompilerOptions } from '@vue/language-core';
import * as net from 'net';
import type * as ts from 'typescript';
export interface NamedPipeServer {
    path: string;
    serverKind: ts.server.ProjectKind;
    currentDirectory: string;
}
export declare const pipeTable: string;
export declare const projects: Map<ts.server.Project, {
    info: ts.server.PluginCreateInfo;
    files: FileRegistry;
    ts: typeof ts;
    vueOptions: VueCompilerOptions;
}>;
export declare function getProject(fileName: string): {
    info: ts.server.PluginCreateInfo;
    files: {
        languagePlugins: import("@vue/language-core").LanguagePlugin<import("@vue/language-core").VirtualCode>[];
        set(id: string, languageId: string, snapshot: ts.IScriptSnapshot, plugins?: import("@vue/language-core").LanguagePlugin<import("@vue/language-core").VirtualCode>[] | undefined): import("@vue/language-core").SourceFile;
        delete(id: string): void;
        get(id: string): import("@vue/language-core").SourceFile | undefined;
        getByVirtualCode(virtualCode: import("@vue/language-core").VirtualCode): import("@vue/language-core").SourceFile;
        getLinkedCodeMap(virtualCode: import("@vue/language-core").VirtualCode): import("@vue/language-core").LinkedCodeMap | undefined;
        getMaps(virtualCode: import("@vue/language-core").VirtualCode): Map<string, [ts.IScriptSnapshot, import("@vue/language-core").SourceMap<import("@vue/language-core").CodeInformation>]>;
        getVirtualCode(sourceFileId: string, virtualCodeId: string): readonly [import("@vue/language-core").VirtualCode, import("@vue/language-core").SourceFile] | readonly [undefined, undefined];
    };
    ts: typeof ts;
    vueOptions: VueCompilerOptions;
} | undefined;
export declare function connect(path: string): Promise<net.Socket | undefined>;
