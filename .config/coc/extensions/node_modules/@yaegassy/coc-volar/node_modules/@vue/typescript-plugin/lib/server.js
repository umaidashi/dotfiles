"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startNamedPipeServer = void 0;
const fs = require("fs");
const net = require("net");
const collectExtractProps_1 = require("./requests/collectExtractProps");
const componentInfos_1 = require("./requests/componentInfos");
const containsFile_1 = require("./requests/containsFile");
const getPropertiesAtLocation_1 = require("./requests/getPropertiesAtLocation");
const getQuickInfoAtPosition_1 = require("./requests/getQuickInfoAtPosition");
const utils_1 = require("./utils");
let started = false;
function startNamedPipeServer(serverKind, currentDirectory) {
    if (started)
        return;
    started = true;
    const pipeFile = process.platform === 'win32'
        ? `\\\\.\\pipe\\vue-tsp-${process.pid}`
        : `/tmp/vue-tsp-${process.pid}`;
    const server = net.createServer(connection => {
        connection.on('data', data => {
            const text = data.toString();
            const request = JSON.parse(text);
            if (request.type === 'containsFile') {
                const result = containsFile_1.containsFile.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'collectExtractProps') {
                const result = collectExtractProps_1.collectExtractProps.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'getPropertiesAtLocation') {
                const result = getPropertiesAtLocation_1.getPropertiesAtLocation.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'getQuickInfoAtPosition') {
                const result = getQuickInfoAtPosition_1.getQuickInfoAtPosition.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            // Component Infos
            else if (request.type === 'getComponentProps') {
                const result = componentInfos_1.getComponentProps.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'getComponentEvents') {
                const result = componentInfos_1.getComponentEvents.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'getTemplateContextProps') {
                const result = componentInfos_1.getTemplateContextProps.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'getComponentNames') {
                const result = componentInfos_1.getComponentNames.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else if (request.type === 'getElementAttrs') {
                const result = componentInfos_1.getElementAttrs.apply(null, request.args);
                connection.write(JSON.stringify(result ?? null));
            }
            else {
                console.warn('[Vue Named Pipe Server] Unknown request type:', request.type);
            }
            connection.end();
        });
        connection.on('error', err => console.error('[Vue Named Pipe Server]', err.message));
    });
    cleanupPipeTable();
    if (!fs.existsSync(utils_1.pipeTable)) {
        fs.writeFileSync(utils_1.pipeTable, JSON.stringify([]));
    }
    const table = JSON.parse(fs.readFileSync(utils_1.pipeTable, 'utf8'));
    table.push({
        path: pipeFile,
        serverKind,
        currentDirectory,
    });
    fs.writeFileSync(utils_1.pipeTable, JSON.stringify(table, undefined, 2));
    try {
        fs.unlinkSync(pipeFile);
    }
    catch { }
    server.listen(pipeFile);
}
exports.startNamedPipeServer = startNamedPipeServer;
function cleanupPipeTable() {
    if (!fs.existsSync(utils_1.pipeTable)) {
        return;
    }
    for (const server of JSON.parse(fs.readFileSync(utils_1.pipeTable, 'utf8'))) {
        (0, utils_1.connect)(server.path).then(client => {
            if (client) {
                client.end();
            }
            else {
                let table = JSON.parse(fs.readFileSync(utils_1.pipeTable, 'utf8'));
                table = table.filter(item => item.path !== server.path);
                fs.writeFileSync(utils_1.pipeTable, JSON.stringify(table, undefined, 2));
            }
        });
    }
}
//# sourceMappingURL=server.js.map