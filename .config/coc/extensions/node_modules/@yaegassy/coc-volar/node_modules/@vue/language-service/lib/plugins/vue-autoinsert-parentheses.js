"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const vue_autoinsert_dotvalue_1 = require("./vue-autoinsert-dotvalue");
function create(ts) {
    return {
        name: 'vue-autoinsert-parentheses',
        create(context) {
            return {
                async provideAutoInsertionEdit(document, position, lastChange) {
                    const enabled = await context.env.getConfiguration?.('vue.autoInsert.parentheses') ?? false;
                    if (!enabled)
                        return;
                    if (!(0, vue_autoinsert_dotvalue_1.isCharacterTyping)(document, lastChange))
                        return;
                    const [virtualCode] = context.documents.getVirtualCodeByUri(document.uri);
                    if (virtualCode?.id !== 'template_format')
                        return;
                    const offset = document.offsetAt(position);
                    for (const mappedRange of virtualCode.mappings) {
                        const generatedCodeEnd = mappedRange.generatedOffsets[mappedRange.generatedOffsets.length - 1]
                            + mappedRange.lengths[mappedRange.lengths.length - 1];
                        if (generatedCodeEnd === offset) {
                            const text = document.getText().substring(mappedRange.generatedOffsets[0], generatedCodeEnd);
                            const ast = ts.createSourceFile('', text, ts.ScriptTarget.Latest);
                            if (ast.statements.length === 1) {
                                const statement = ast.statements[0];
                                if (ts.isExpressionStatement(statement)
                                    && ((ts.isAsExpression(statement.expression)
                                        && ts.isTypeReferenceNode(statement.expression.type)
                                        && ts.isIdentifier(statement.expression.type.typeName)
                                        && statement.expression.type.typeName.text)
                                        || (ts.isBinaryExpression(statement.expression)
                                            && statement.expression.right.getText(ast)
                                            && statement.expression.operatorToken.kind === ts.SyntaxKind.InstanceOfKeyword)
                                        || (ts.isTypeOfExpression(statement.expression)
                                            && statement.expression.expression.getText(ast)))) {
                                    // https://code.visualstudio.com/docs/editor/userdefinedsnippets#_grammar
                                    const escapedText = text
                                        .replaceAll('\\', '\\\\')
                                        .replaceAll('$', '\\$')
                                        .replaceAll('}', '\\}');
                                    return {
                                        range: {
                                            start: document.positionAt(mappedRange.generatedOffsets[0]),
                                            end: document.positionAt(generatedCodeEnd),
                                        },
                                        newText: '(' + escapedText + '$0' + ')',
                                    };
                                }
                            }
                        }
                    }
                },
            };
        },
    };
}
exports.create = create;
//# sourceMappingURL=vue-autoinsert-parentheses.js.map