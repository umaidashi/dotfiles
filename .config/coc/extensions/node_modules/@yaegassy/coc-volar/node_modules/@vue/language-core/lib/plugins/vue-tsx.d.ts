import { Mapping, StackNode } from '@volar/language-core';
import type { Code, Sfc, VueLanguagePlugin } from '../types';
export declare const tsCodegen: WeakMap<Sfc, {
    scriptRanges: () => {
        exportDefault: (import("../types").TextRange & {
            expression: import("../types").TextRange;
            args: import("../types").TextRange;
            argsNode: import("typescript").ObjectLiteralExpression | undefined;
            componentsOption: import("../types").TextRange | undefined;
            componentsOptionNode: import("typescript").ObjectLiteralExpression | undefined;
            nameOption: import("../types").TextRange | undefined;
        }) | undefined;
        bindings: import("../types").TextRange[];
    } | undefined;
    scriptSetupRanges: () => {
        leadingCommentEndOffset: number;
        importSectionEndOffset: number;
        bindings: import("../types").TextRange[];
        props: {
            name?: string | undefined;
            define?: (import("../types").TextRange & {
                arg?: import("../types").TextRange | undefined;
                typeArg?: import("../types").TextRange | undefined;
            } & {
                statement: import("../types").TextRange;
            }) | undefined;
            withDefaults?: (import("../types").TextRange & {
                arg?: import("../types").TextRange | undefined;
            }) | undefined;
        };
        slots: {
            name?: string | undefined;
            define?: (import("../types").TextRange & {
                arg?: import("../types").TextRange | undefined;
                typeArg?: import("../types").TextRange | undefined;
            }) | undefined;
        };
        emits: {
            name?: string | undefined;
            define?: (import("../types").TextRange & {
                arg?: import("../types").TextRange | undefined;
                typeArg?: import("../types").TextRange | undefined;
            }) | undefined;
        };
        expose: {
            name?: string | undefined;
            define?: (import("../types").TextRange & {
                arg?: import("../types").TextRange | undefined;
                typeArg?: import("../types").TextRange | undefined;
            }) | undefined;
        };
        defineProp: {
            name: import("../types").TextRange | undefined;
            nameIsString: boolean;
            type: import("../types").TextRange | undefined;
            defaultValue: import("../types").TextRange | undefined;
            required: boolean;
            isModel?: boolean | undefined;
        }[];
    } | undefined;
    lang: () => string;
    generatedScript: () => {
        codes: Code[];
        codeStacks: StackNode[];
        linkedCodeMappings: Mapping<any>[];
    };
    generatedTemplate: () => {
        codes: Code[];
        codeStacks: string[];
        formatCodes: Code[];
        formatCodeStacks: string[];
        cssCodes: Code[];
        cssCodeStacks: string[];
        tagOffsetsMap: Map<string, number[]>;
        accessedGlobalVariables: Set<string>;
        hasSlot: boolean;
    } | undefined;
}>;
declare const plugin: VueLanguagePlugin;
export default plugin;
