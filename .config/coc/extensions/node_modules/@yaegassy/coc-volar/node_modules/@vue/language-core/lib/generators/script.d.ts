import type { Mapping } from '@volar/language-core';
import type * as ts from 'typescript';
import type { ScriptRanges } from '../parsers/scriptRanges';
import type { ScriptSetupRanges } from '../parsers/scriptSetupRanges';
import type { Code, CodeAndStack, Sfc, VueCompilerOptions } from '../types';
export declare function generate(ts: typeof import('typescript'), fileName: string, script: Sfc['script'], scriptSetup: Sfc['scriptSetup'], styles: Sfc['styles'], // TODO: computed it
lang: string, scriptRanges: ScriptRanges | undefined, scriptSetupRanges: ScriptSetupRanges | undefined, templateCodegen: {
    tsCodes: Code[];
    tsCodegenStacks: string[];
    tagNames: Set<string>;
    accessedGlobalVariables: Set<string>;
    hasSlot: boolean;
} | undefined, compilerOptions: ts.CompilerOptions, vueCompilerOptions: VueCompilerOptions, globalTypesHolder: string | undefined, getGeneratedLength: () => number, linkedCodeMappings: Mapping<any>[] | undefined, codegenStack: boolean): Generator<CodeAndStack>;
