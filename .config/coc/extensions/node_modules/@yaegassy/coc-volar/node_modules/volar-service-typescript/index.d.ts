import type { Result, ServiceContext, ServicePlugin } from '@volar/language-service';
import type * as ts from 'typescript';
import type { TextDocument } from 'vscode-languageserver-textdocument';
export * from '@volar/typescript';
export interface Provide {
    'typescript/typescript': () => typeof import('typescript');
    'typescript/languageService': () => ts.LanguageService;
    'typescript/languageServiceHost': () => ts.LanguageServiceHost;
    'typescript/syntacticLanguageService': () => ts.LanguageService;
    'typescript/syntacticLanguageServiceHost': () => ts.LanguageServiceHost;
}
export declare function create(ts: typeof import('typescript'), { isFormattingEnabled, isValidationEnabled, isSuggestionsEnabled, isAutoClosingTagsEnabled, }?: {
    isFormattingEnabled?(document: TextDocument, context: ServiceContext): Result<boolean>;
    isValidationEnabled?(document: TextDocument, context: ServiceContext): Result<boolean>;
    isSuggestionsEnabled?(document: TextDocument, context: ServiceContext): Result<boolean>;
    isAutoClosingTagsEnabled?(document: TextDocument, context: ServiceContext): Result<boolean>;
}): ServicePlugin;
//# sourceMappingURL=index.d.ts.map